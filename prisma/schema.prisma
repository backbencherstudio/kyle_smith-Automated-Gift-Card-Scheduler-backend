generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE USER MANAGEMENT ====================

model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String?

  // Relations
  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]

  // New relations for gift system
  gift_recipients        GiftRecipient[] // For gift recipients
  gift_scheduling        GiftScheduling[]
  inventory_transactions InventoryTransaction[]
  Contact                Contact[]
  QueueJobHistory        QueueJobHistory[]

  @@map("users")
}

// ==================== ROLE & PERMISSION SYSTEM ====================

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// ==================== GIFT CARD INVENTORY SYSTEM ====================

enum GiftCardStatus {
  AVAILABLE
  USED
  EXPIRED
  RESERVED
}

model Vendor {
  id          String   @id @default(cuid())
  name        String // "Amazon", "Walmart", "Target"
  description String?
  website     String?
  logo        String?
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  gift_card_inventory GiftCardInventory[]

  @@map("vendors")
}

model GiftCardInventory {
  id        String @id @default(cuid())
  vendor_id String
  vendor    Vendor @relation(fields: [vendor_id], references: [id])

  card_code      String // Encrypted gift card code
  card_code_hash String?
  face_value     Decimal // Original card value ($50)
  purchase_cost  Decimal // What client paid ($50)
  selling_price  Decimal // What users pay ($55)

  status        GiftCardStatus @default(AVAILABLE)
  purchase_date DateTime // When client bought it
  expiry_date   DateTime? // Card expiration date

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Relations
  gifts                  Gift[]
  gift_scheduling        GiftScheduling[]
  inventory_transactions InventoryTransaction[]
  payment_transactions   PaymentTransaction[]

  @@unique([card_code_hash, vendor_id])
  @@map("gift_card_inventory")
}

model Gift {
  id           String            @id @default(cuid())
  inventory_id String
  inventory    GiftCardInventory @relation(fields: [inventory_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  gift_scheduling GiftScheduling[]

  @@map("gifts")
}

model GiftScheduling {
  id           String        @id @default(cuid())
  user_id      String
  user         User          @relation(fields: [user_id], references: [id])
  recipient_id String // Changed from contact_id
  recipient    GiftRecipient @relation(fields: [recipient_id], references: [id]) // Changed relation
  gift_id      String
  gift         Gift          @relation(fields: [gift_id], references: [id])

  is_notify Boolean @default(true)

  inventory_id String?
  inventory    GiftCardInventory? @relation(fields: [inventory_id], references: [id])

  scheduled_date  DateTime
  delivery_email  String // Email address for delivery
  custom_message  String? // Custom message with gift
  delivery_status String    @default("PENDING") // "PENDING", "SENT", "FAILED"
  sent_at         DateTime? // When email was actually sent

  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  QueueJobHistory QueueJobHistory[]

  @@map("gift_scheduling")
}

model Contact {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  first_name   String
  last_name    String
  email        String
  phone_number String?
  message      String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  @@map("contacts")
}

model GiftRecipient {
  id            String   @id @default(cuid())
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  user_id       String
  user          User     @relation(fields: [user_id], references: [id])
  name          String
  email         String // Primary delivery method
  phone_number  String? // Optional backup contact
  birthday_date DateTime
  address       String? // Optional reference only

  gift_scheduling GiftScheduling[]

  @@map("gift_recipients")
}

enum InventoryTransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
}

model InventoryTransaction {
  id               String                   @id @default(cuid())
  inventory_id     String
  inventory        GiftCardInventory        @relation(fields: [inventory_id], references: [id])
  transaction_type InventoryTransactionType
  quantity         Int                      @default(1)
  unit_price       Decimal
  total_amount     Decimal
  user_id          String? // For sales transactions
  user             User?                    @relation(fields: [user_id], references: [id])
  notes            String?
  created_at       DateTime                 @default(now())

  @@map("inventory_transactions")
}

// ==================== PAYMENT SYSTEM ====================

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  order_id         String?
  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  // New fields for inventory tracking
  transaction_category String? // "INVENTORY_PURCHASE", "USER_SALE", "REFUND"
  inventory_id         String?
  inventory            GiftCardInventory? @relation(fields: [inventory_id], references: [id])

  @@map("payment_transactions")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  // Add essential new fields
  stripe_customer_id String
  is_default         Boolean @default(false)
  is_active          Boolean @default(true)

  @@map("user_payment_methods")
}

// ==================== NOTIFICATION SYSTEM ====================

model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

// ==================== CHAT SYSTEM ====================

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name     String?
  type     String?
  size     Int?
  file     String?
  file_alt String?

  messages Message[]

  @@map("attachments")
}

model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id String?
  creator    User?   @relation("creator", fields: [creator_id], references: [id])

  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  messages Message[]

  @@map("conversations")
}

// ==================== UTILITY MODELS ====================

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

enum JobStatus {
  WAITING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  CANCELLED
}

model QueueJobHistory {
  id         String    @id @default(cuid())
  job_id     String    @unique
  user_id    String?
  user       User?     @relation(fields: [user_id], references: [id])
  job_name   String
  job_status JobStatus @default(COMPLETED)
  job_data   Json

  // Gift scheduling details
  gift_scheduling_id String?
  gift_scheduling    GiftScheduling? @relation(fields: [gift_scheduling_id], references: [id])

  // Extracted fields for easy querying
  recipient_name  String?
  recipient_email String?
  sender_name     String?
  vendor_name     String?
  face_value      Decimal?
  gift_card_code  String?
  custom_message  String?
  delivery_email  String?

  // Timing information
  created_at   DateTime  @default(now())
  processed_at DateTime?
  completed_at DateTime  @default(now())

  // Processing metrics
  attempts           Int     @default(0)
  processing_time_ms Int?
  error_message      String?

  // Delivery confirmation
  email_sent_at   DateTime?
  email_delivered Boolean   @default(true)
  delivery_error  String?

  @@index([user_id])
  @@index([gift_scheduling_id])
  @@index([job_status])
  @@index([created_at])
  @@index([completed_at])
  @@index([recipient_email])
  @@map("queue_job_history")
}
